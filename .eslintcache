[{"/Users/ming/code/ccc-react-paint/src/index.tsx":"1","/Users/ming/code/ccc-react-paint/src/CCCPaint.tsx":"2","/Users/ming/code/ccc-react-paint/src/util/toolType.ts":"3","/Users/ming/code/ccc-react-paint/src/context/index.ts":"4","/Users/ming/code/ccc-react-paint/src/util/dispatcher/index.ts":"5","/Users/ming/code/ccc-react-paint/src/components/canvas/index.tsx":"6","/Users/ming/code/ccc-react-paint/src/components/toolBar/tool/index.tsx":"7","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/index.tsx":"8","/Users/ming/code/ccc-react-paint/src/util/dispatcher/event.ts":"9","/Users/ming/code/ccc-react-paint/src/util/tool/shape.ts":"10","/Users/ming/code/ccc-react-paint/src/util/tool/tool.ts":"11","/Users/ming/code/ccc-react-paint/src/util/tool/index.ts":"12","/Users/ming/code/ccc-react-paint/src/util/snapshot/index.ts":"13","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/shape/index.tsx":"14","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/pen/index.tsx":"15","/Users/ming/code/ccc-react-paint/src/util/tool/eraser.ts":"16","/Users/ming/code/ccc-react-paint/src/util/tool/pen.ts":"17","/Users/ming/code/ccc-react-paint/src/util/tool/colorExtract.ts":"18","/Users/ming/code/ccc-react-paint/src/util/tool/colorFill.ts":"19","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/components/colorPanel/index.tsx":"20","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/components/shape/index.tsx":"21","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/components/slider/index.tsx":"22","/Users/ming/code/ccc-react-paint/src/components/canvas/TextBox.tsx":"23","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/formatColor/index.tsx":"24","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/text/index.tsx":"25","/Users/ming/code/ccc-react-paint/src/util/tool/Text.ts":"26"},{"size":161,"mtime":1654780290364,"results":"27","hashOfConfig":"28"},{"size":4199,"mtime":1654780530323,"results":"29","hashOfConfig":"28"},{"size":918,"mtime":1654780639214,"results":"30","hashOfConfig":"28"},{"size":1368,"mtime":1654780290364,"results":"31","hashOfConfig":"28"},{"size":2010,"mtime":1654780290365,"results":"32","hashOfConfig":"28"},{"size":7278,"mtime":1654780456491,"results":"33","hashOfConfig":"28"},{"size":3743,"mtime":1654780290364,"results":"34","hashOfConfig":"28"},{"size":1207,"mtime":1654780290362,"results":"35","hashOfConfig":"28"},{"size":104,"mtime":1654780290365,"results":"36","hashOfConfig":"28"},{"size":8172,"mtime":1654780290366,"results":"37","hashOfConfig":"28"},{"size":3074,"mtime":1654780290366,"results":"38","hashOfConfig":"28"},{"size":247,"mtime":1654780290366,"results":"39","hashOfConfig":"28"},{"size":948,"mtime":1654780290365,"results":"40","hashOfConfig":"28"},{"size":594,"mtime":1654780290363,"results":"41","hashOfConfig":"28"},{"size":821,"mtime":1654780458303,"results":"42","hashOfConfig":"28"},{"size":196,"mtime":1654780290365,"results":"43","hashOfConfig":"28"},{"size":3074,"mtime":1654780290366,"results":"44","hashOfConfig":"28"},{"size":1008,"mtime":1654780290365,"results":"45","hashOfConfig":"28"},{"size":3621,"mtime":1654780470018,"results":"46","hashOfConfig":"28"},{"size":1846,"mtime":1654780290361,"results":"47","hashOfConfig":"28"},{"size":3660,"mtime":1654780290361,"results":"48","hashOfConfig":"28"},{"size":1030,"mtime":1654780290362,"results":"49","hashOfConfig":"28"},{"size":458,"mtime":1654780290359,"results":"50","hashOfConfig":"28"},{"size":1136,"mtime":1654780290362,"results":"51","hashOfConfig":"28"},{"size":3535,"mtime":1654780451464,"results":"52","hashOfConfig":"28"},{"size":3627,"mtime":1654780466587,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1spqqoa",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},"/Users/ming/code/ccc-react-paint/src/index.tsx",[],"/Users/ming/code/ccc-react-paint/src/CCCPaint.tsx",[],"/Users/ming/code/ccc-react-paint/src/util/toolType.ts",[],"/Users/ming/code/ccc-react-paint/src/context/index.ts",[],"/Users/ming/code/ccc-react-paint/src/util/dispatcher/index.ts",[],"/Users/ming/code/ccc-react-paint/src/components/canvas/index.tsx",["114","115"],"import React from \"react\";\nimport \"./index.less\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { LineWidthType, ShapeOutlineType, ShapeToolType, ToolType } from \"../../util/toolType\";\nimport { FC } from \"react\";\nimport { useState } from \"react\";\nimport TextBox from \"./TextBox\";\nimport { Pen, Tool, Eraser, ColorExtract, ColorFill, Text } from \"../../util/tool\";\nimport Shape from \"../../util/tool/shape\";\nimport { useContext } from \"react\";\nimport { DispatcherContext } from \"../../context\";\nimport { CLEAR_EVENT, REDO_EVENT, UNDO_EVENT } from \"../../util/dispatcher/event\";\nimport SnapShot from \"../../util/snapshot\";\nimport Snapshot from \"../../util/snapshot\";\n\ninterface CanvasProps {\n  toolType: ToolType;\n  shapeType: ShapeToolType;\n  shapeOutlineType: ShapeOutlineType;\n  lineWidthType: LineWidthType;\n  mainColor: string;\n  subColor: string;\n  lineSize?: number;\n  fillColor: string;\n  fontStyle: any;\n  setColor: (value: string) => void;\n}\n\nconst Canvas: FC<CanvasProps> = (props) => {\n  const {\n    toolType,\n    lineWidthType,\n    mainColor,\n    subColor,\n    setColor,\n    fillColor,\n    shapeType,\n    shapeOutlineType,\n    fontStyle,\n    lineSize = 1\n  } = props;\n  const [tool, setTool] = useState<Tool>();\n  const [showArea, setShow] = useState(false);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const dispatcherContext = useContext(DispatcherContext);\n  const [snapshot] = useState<SnapShot>(new Snapshot());\n\n  useEffect(() => {\n    switch (toolType) {\n      case ToolType.PEN:\n        setTool(new Pen());\n        break;\n      case ToolType.ERASER:\n        setTool(new Eraser());\n        break;\n      case ToolType.COLOR_EXTRACT:\n        setTool(new ColorExtract(setColor));\n        break;\n      case ToolType.COLOR_FILL:\n        setTool(new ColorFill());\n        break;\n      case ToolType.TEXT:\n        setTool(new Text(fontStyle));\n        break;\n      case ToolType.SHAPE:\n        setTool(new Shape(shapeType, shapeOutlineType === ShapeOutlineType.DOTTED));\n        break;\n      default:\n        break;\n    }\n  }, [toolType, shapeType, fontStyle]);\n\n  useEffect(() => {\n    if (tool instanceof Shape) {\n      tool.isDashed = shapeOutlineType === ShapeOutlineType.DOTTED;\n    }\n  }, [shapeOutlineType]);\n\n  useEffect(() => {\n    switch (lineWidthType) {\n      case LineWidthType.THIN:\n        Tool.lineWidthFactor = 1;\n        break;\n      case LineWidthType.MIDDLE:\n        Tool.lineWidthFactor = 2;\n        break;\n      case LineWidthType.BOLD:\n        Tool.lineWidthFactor = 3;\n        break;\n      case LineWidthType.MAXBOLD:\n        Tool.lineWidthFactor = 4;\n        break;\n      case LineWidthType.LINESIZE:\n        Tool.lineWidthFactor = lineSize;\n        break;\n      default:\n        break;\n    }\n  }, [lineWidthType, lineSize]);\n\n  useEffect(() => {\n    Tool.mainColor = mainColor;\n  }, [mainColor]);\n\n  useEffect(() => {\n    Tool.fillColor = fillColor;\n  }, [fillColor]);\n\n  useEffect(() => {\n    Tool.subColor = subColor;\n  }, [subColor]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.height = canvas.clientHeight;\n      canvas.width = canvas.clientWidth;\n\n      Tool.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      // 初始化，将画布绘制成白色底，否则提取颜色会变成黑色\n\n      const ctx: any = canvas.getContext(\"2d\");\n      ctx.font = \"26px Arial bolder\";\n      ctx.fillStyle = \"red\";\n      ctx.fillText(\"text\", 123, 120);\n      if (ctx) {\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        snapshot.add(ctx.getImageData(0, 0, canvas.width, canvas.height));\n      }\n\n      // 注册清空画布事件\n      const dispatcher = dispatcherContext.dispatcher;\n      const callback = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          ctx.fillStyle = \"white\";\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n      };\n      dispatcher.on(CLEAR_EVENT, callback);\n\n      // 注册画布前进事件\n      const forward = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.forward();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(REDO_EVENT, forward);\n\n      // 注册画布后退事件\n      const back = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.back();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(UNDO_EVENT, back);\n\n      window.addEventListener(\"resize\", () => {\n        const canvasData = Tool.ctx.getImageData(0, 0, canvas.width, canvas.height);\n        canvas.height = canvas.clientHeight;\n        canvas.width = canvas.clientWidth;\n        Tool.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        Tool.ctx.fillStyle = \"white\";\n        Tool.ctx.fillRect(0, 0, canvas.width, canvas.height);\n        Tool.ctx.putImageData(canvasData, 0, 0);\n      });\n\n      return () => {\n        dispatcher.off(CLEAR_EVENT, callback);\n      };\n    }\n  }, [canvasRef]);\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseDown(event);\n    }\n  };\n\n  const onMouseMove = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseMove(event);\n    }\n  };\n\n  const onMouseUp = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseUp(event);\n\n      // 存储canvas剪影\n      snapshot.add(Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height));\n    }\n  };\n\n  const onTouchStart = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchStart(event);\n    }\n  };\n\n  const onTouchMove = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchMove(event);\n    }\n  };\n\n  const onTouchEnd = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchEnd(event);\n    }\n\n    // 存储canvas剪影\n    snapshot.add(Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height));\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener(\"mousedown\", onMouseDown);\n      canvas.addEventListener(\"mousemove\", onMouseMove);\n      canvas.addEventListener(\"mouseup\", onMouseUp);\n\n      canvas.addEventListener(\"touchstart\", onTouchStart);\n      canvas.addEventListener(\"touchmove\", onTouchMove);\n      canvas.addEventListener(\"touchend\", onTouchEnd);\n\n      return () => {\n        canvas.removeEventListener(\"mousedown\", onMouseDown);\n        canvas.removeEventListener(\"mousemove\", onMouseMove);\n        canvas.removeEventListener(\"mouseup\", onMouseUp);\n\n        canvas.removeEventListener(\"touchstart\", onTouchStart);\n        canvas.removeEventListener(\"touchmove\", onTouchMove);\n        canvas.removeEventListener(\"touchend\", onTouchEnd);\n      };\n    }\n  }, [canvasRef, onMouseDown, onMouseMove, onMouseUp]);\n\n  return (\n    <>\n      <canvas id=\"ccc-paint-canvas\" className=\"canvas\" ref={canvasRef} width=\"100%\" height=\"100%\"></canvas>\n      <TextBox />\n    </>\n  );\n};\n\nexport default Canvas;\n","/Users/ming/code/ccc-react-paint/src/components/toolBar/tool/index.tsx",["116"],"import React from \"react\";\nimport CreateTwoTone from \"@material-ui/icons/CreateTwoTone\";\nimport FormatColorFillTwoTone from \"@material-ui/icons/FormatColorFillTwoTone\";\nimport ColorizeTwoToneIcon from \"@material-ui/icons/ColorizeTwoTone\";\nimport AccessAlarm from \"@material-ui/icons/AccessAlarm\";\n// import SearchTwoToneIcon from \"@material-ui/icons/SearchTwoTone\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport { ToolType } from \"../../../util/toolType\";\nimport { ToolTypeContext } from \"../../../context\";\nimport \"./index.less\";\n\nconst selectedToolClass = \"selected-tool\";\nexport interface ToolPanelProps {\n  className?: string;\n}\n\nconst ToolPanel: React.FC<ToolPanelProps> = (props) => {\n  const { className } = props;\n  return (\n    <div className={className ? `toolpanel ${className}` : \"toolpanel\"}>\n      <ToolTypeContext.Consumer>\n        {({ type, setType }) => (\n          <>\n            <span title=\"铅笔\" className=\"tool-Icon\">\n              <CreateTwoTone\n                className={\n                  type === ToolType.PEN\n                    ? `tool-item ${selectedToolClass}`\n                    : \"tool-item\"\n                }\n                onClick={() => {\n                  setType(ToolType.PEN);\n                }}\n              />\n            </span>\n            <span title=\"橡皮擦\" className=\"tool-Icon\">\n              <img\n                src=\"./icon/eraser.svg\"\n                className={\n                  type === ToolType.ERASER\n                    ? `tool-item ${selectedToolClass}`\n                    : \"tool-item\"\n                }\n                onClick={() => {\n                  setType(ToolType.ERASER);\n                }}\n              />\n            </span>\n            <span title=\"填充\" className=\"tool-Icon\">\n              <FormatColorFillTwoTone\n                className={\n                  type === ToolType.COLOR_FILL\n                    ? `tool-item ${selectedToolClass}`\n                    : \"tool-item\"\n                }\n                onClick={() => {\n                  setType(ToolType.COLOR_FILL);\n                }}\n              />\n            </span>\n            <span title=\"形状\" className=\"tool-Icon\">\n              <AccessAlarm\n                className={\n                  type === ToolType.SHAPE\n                    ? `tool-item ${selectedToolClass}`\n                    : \"tool-item\"\n                }\n                onClick={() => {\n                  setType(ToolType.SHAPE);\n                }}\n              />\n            </span>\n            {/* <span title=\"颜色选取器\" className=\"tool-Icon\">\n              <ColorizeTwoToneIcon\n                className={\n                  type === ToolType.COLOR_EXTRACT\n                    ? `tool-item ${selectedToolClass}`\n                    : \"tool-item\"\n                }\n                onClick={() => {\n                  setType(ToolType.COLOR_EXTRACT);\n                }}\n              />\n            </span> */}\n            <span title=\"文字\" className=\"tool-Icon\">\n              <TextFieldsIcon\n                className={\n                  type === ToolType.TEXT\n                    ? `tool-item ${selectedToolClass}`\n                    : \"tool-item\"\n                }\n                onClick={() => {\n                  setType(ToolType.TEXT);\n                }}\n              />\n            </span>\n            {/* <span title=\"放大镜\">\n                                    <SearchTwoToneIcon className={type === ToolType.MAGNIFYING ? `tool-item ${selectedToolClass}` : \"tool-item\"} onClick={() => {setType(ToolType.MAGNIFYING)}} />\n                                </span>  */}\n          </>\n        )}\n      </ToolTypeContext.Consumer>\n    </div>\n  );\n};\n\nexport default ToolPanel;\n","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/index.tsx",["117","118","119"],"import React, { useEffect } from \"react\";\nimport \"./index.less\";\nimport { ToolType } from \"../../../util/toolType\";\nimport { FC } from \"react\";\nimport ShowPen from \"./pen\";\nimport ShowShape from \"./shape\";\nimport FormatColor from \"./formatColor\";\nimport Text from \"./text\";\nimport { useMemo } from \"react\";\nimport { useState } from \"react\";\ninterface ToolbarProps {\n  toolType: ToolType;\n}\n\nconst ToolRightBar: FC<ToolbarProps> = (props) => {\n  const { toolType } = props;\n\n  const renderChild = (): any => {\n    let content = null;\n    switch (toolType) {\n      case ToolType.PEN:\n        content = <ShowPen />;\n        break;\n      case ToolType.SHAPE:\n        content = <ShowShape />;\n        break;\n      case ToolType.ERASER:\n        // setTool(new Eraser());\n        break;\n      case ToolType.TEXT:\n        content = <Text />;\n        break;\n      case ToolType.COLOR_FILL:\n        content = <FormatColor />;\n        break;\n      default:\n        break;\n    }\n    return content;\n  };\n\n  return <div className=\"ccc-showTool\">{renderChild()}</div>;\n};\n\nexport default React.memo(ToolRightBar, (preProps: ToolbarProps, nextProps: ToolbarProps) => {\n  return nextProps.toolType === ToolType.ERASER;\n});\n","/Users/ming/code/ccc-react-paint/src/util/dispatcher/event.ts",[],"/Users/ming/code/ccc-react-paint/src/util/tool/shape.ts",[],"/Users/ming/code/ccc-react-paint/src/util/tool/tool.ts",[],"/Users/ming/code/ccc-react-paint/src/util/tool/index.ts",[],"/Users/ming/code/ccc-react-paint/src/util/snapshot/index.ts",[],"/Users/ming/code/ccc-react-paint/src/components/toolBar/right/shape/index.tsx",["120","121"],"import React from \"react\";\nimport { FC } from \"react\";\nimport Shape from \"../components/shape\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport ColorPanel from \"../components/colorPanel\";\n\nimport \"./index.less\";\n\nconst showShape: FC = () => {\n  return (\n    <div className=\"ccc-shape\">\n      <h3 className=\"ccc-shape-title\">\n        <span>Shope</span>\n        <ExpandMore />\n      </h3>\n      <Shape className=\"toolbar-item\" />\n      <ColorPanel className=\"toolbar-item\" />\n    </div>\n  );\n};\n\nexport default showShape;\n","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/pen/index.tsx",["122"],"import React from \"react\";\nimport { FC } from \"react\";\nimport { useContext } from \"react\";\nimport { LineWidthContext } from \"../../../../context\";\nimport { LineWidthType } from \"../../../../util/toolType\";\n\nimport IntegerStep from \"../components/slider\";\nimport ColorPanel from \"../components/colorPanel\";\nimport \"./index.less\";\nconst ShowPen: FC = () => {\n  const lineWidthContext = useContext(LineWidthContext);\n\n  return (\n    <div className=\"ccc-pen\">\n      <div className=\"ccc-slider-item\">\n        <h3>Brush thickness</h3>\n        <IntegerStep\n          min={1}\n          max={20}\n          onPropsChange={(value) => {\n            lineWidthContext.setLineSize(value);\n          }}\n        />\n      </div>\n      <ColorPanel className=\"toolbar-item\" title=\"Panel Color\" />\n    </div>\n  );\n};\n\nexport default ShowPen;\n","/Users/ming/code/ccc-react-paint/src/util/tool/eraser.ts",[],"/Users/ming/code/ccc-react-paint/src/util/tool/pen.ts",[],"/Users/ming/code/ccc-react-paint/src/util/tool/colorExtract.ts",[],"/Users/ming/code/ccc-react-paint/src/util/tool/colorFill.ts",[],"/Users/ming/code/ccc-react-paint/src/components/toolBar/right/components/colorPanel/index.tsx",[],"/Users/ming/code/ccc-react-paint/src/components/toolBar/right/components/shape/index.tsx",[],"/Users/ming/code/ccc-react-paint/src/components/toolBar/right/components/slider/index.tsx",[],"/Users/ming/code/ccc-react-paint/src/components/canvas/TextBox.tsx",["123"],"import React, { FC } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst TextBox: FC = () => {\n  return (\n    // <TextField\n    //   className=\"text-box\"\n    //   id=\"textBox\"\n    //   label=\"Multiline\"\n    //   multiline\n    //   rows={4}\n    //   // defaultValue=\"Default Value\"\n    // />\n    <textarea\n      id=\"textBox\"\n      name=\"story\"\n      className=\"text-box\"\n      //rows={2}\n    ></textarea>\n  );\n};\nexport default TextBox;\n","/Users/ming/code/ccc-react-paint/src/components/toolBar/right/formatColor/index.tsx",[],"/Users/ming/code/ccc-react-paint/src/components/toolBar/right/text/index.tsx",["124"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { TextContext, ColorContext } from \"../../../../context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Select, MenuItem, FormControl } from \"@material-ui/core\";\nimport IntegerStep from \"../components/slider\";\nimport { useMemo } from \"react\";\n\ninterface FormatColor {\n  className?: string;\n}\n\nconst textFamily = [\n  \"Barlow-ExtraBold\",\n  \"DIN-AlternateBold\",\n  \"Trebuchet-MSBold\",\n  \"Trebuchet-MS\",\n  \"Poppins-Bold\",\n  \"Poppins-Light\",\n  \"Poppins-Medium\",\n  \"Poppins-Regular\",\n  \"Poppins-SemiBold\"\n];\n\nconst FormatColor: React.FC<FormatColor> = (props) => {\n  const { className } = props;\n  const [pickerColor, setPickerColor] = useState(createColor(\"#000000FF\"));\n  const TextToolContext = useContext(TextContext);\n  const colorContext = useContext(ColorContext);\n\n  const fontStyle = useMemo(() => {\n    return TextToolContext.fontStyle;\n  }, [TextToolContext.fontStyle]);\n\n  const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? ` ccc-text formatColor ${className}` : \"ccc-text colorpanel\"}>\n      <div className=\"content\">\n        <div className=\"font\">\n          <h3>Font</h3>\n          <FormControl fullWidth>\n            <Select\n              autoWidth\n              className=\"ccc-text-family\"\n              onChange={(event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n                TextToolContext.setFont({\n                  ...fontStyle,\n                  fontFamily: event.target.value as string\n                });\n              }}\n            >\n              {textFamily.map((va) => {\n                return (\n                  <MenuItem key={va} value={va}>\n                    {va}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"font\">\n          <h3>Letter Spacing</h3>\n          <IntegerStep\n            min={1}\n            max={8}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                letterSpacing: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>Font Size</h3>\n          <IntegerStep\n            min={12}\n            max={72}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontSize: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>FLine Height</h3>\n          <IntegerStep\n            min={24}\n            max={56}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                lineHeight: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <h3>color</h3>\n        <div className=\"material-color-box\">\n          <ColorBox\n            value={pickerColor}\n            disableAlpha={false}\n            onChange={(color) => {\n              setPickerColor(color);\n              TextToolContext.setFont({\n                ...fontStyle,\n                color: \"#\" + color.hex\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatColor;\n","/Users/ming/code/ccc-react-paint/src/util/tool/Text.ts",["125","126","127","128","129","130","131","132"],"import { ShapeToolType } from \"../toolType\";\nimport Tool, { Point, getMousePos, getTouchPos, hexToRgb, updateImageData } from \"./tool\";\n\n// interface propsInput = {\n//             x?: number,\n//             y?: Number,\n//             maxWidth?:Number\n// }\n\nclass Text extends Tool {\n  private isMouseDown = false;\n  private saveImageData?: ImageData;\n  private _x: number;\n  private _y: number;\n  private textContent: string;\n  private textBox: any;\n  private fontStyle: any;\n  private canvas: any;\n  public constructor(fontType: any) {\n    super();\n    this._x = NaN;\n    this._y = NaN;\n    this.textBox = document.getElementById(\"textBox\");\n    this.canvas = document.getElementById(\"ccc-paint-canvas\");\n    this.textContent = \"\";\n    this.fontStyle = fontType;\n  }\n\n  private drawing(x: number, y: number) {\n    const context = Tool.ctx;\n    if (!context || !this.canvas) {\n      return;\n    } else {\n      // 设置画笔的颜色和大小\n\n      context.fillStyle = \"#000\"; // 填充颜色为红色\n      // context.strokeStyle = \"blue\"; // 画笔的颜色\n      context.lineWidth = 5; // 指定描边线的宽度\n      context.font = \"10px\";\n\n      if (this.canvas && this.textBox.style) {\n        const { fontSize, fontFamily, letterSpacing } = this.textBox.style;\n        context.fillStyle = this.textBox.color || \"#000\";\n        context.font = `${fontSize} ${fontFamily}`; // 指定描边线的宽度\n        this.canvas.style.letterSpacing = letterSpacing;\n      }\n\n      context.save();\n      context.beginPath();\n\n      // 写字\n      //   const width = this.canvas.offsetWidth;\n      //   console.log(\"----546\", this.canvas);\n      //   const height = this.canvas.offsetHeight;\n      //   const tempImg = new Image();\n      //   tempImg.width = width;\n      //   tempImg.height = height;\n      //   tempImg.onload = function () {\n      //     // 把img绘制在canvas画布上\n      //     context.drawImage(tempImg, 0, 0, width, height);\n      //   };\n      //   (tempImg.src =\n      //     'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><foreignObject width=\"' +\n      //     width +\n      //     '\" height=\"' +\n      //     height +\n      //     '\"><body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;font:' +\n      //     context.font +\n      //     ';\">' +\n      //     this.textContent),\n      //     +\"</body></foreignObject></svg>\";\n      context.fillText(this.textContent, parseInt(this.textBox.style.left), parseInt(this.textBox.style.top));\n      // this.wrapText(this.textContent, parseInt(this.textBox.style.left), parseInt(this.textBox.style.top));\n      context.restore();\n      context.closePath();\n    }\n  }\n\n  public onMouseDown(event: MouseEvent): void {\n    // 鼠标按下位置保存\n\n    event.preventDefault();\n\n    if (this.isMouseDown) {\n      this.textContent = this.textBox.value;\n      this.isMouseDown = false;\n      this.textBox.style[\"z-index\"] = 1;\n      this.textBox.style.visibility = \"hidden\";\n      this.drawing(this._x, this._y);\n      this.textBox.value = \"\";\n    } else if (!this.isMouseDown) {\n      this._x = event.offsetX; // 鼠标按下时保存当前位置，为起始位置\n      this._y = event.offsetY;\n      this.isMouseDown = true;\n      if (typeof this.fontStyle === \"object\") {\n        Object.keys(this.fontStyle).forEach((va) => {\n          this.textBox.style[va] = this.fontStyle[va];\n        });\n      }\n      this.textBox.style.left = this._x + \"px\";\n      this.textBox.style.top = this._y + \"px\";\n      this.textBox.style[\"z-index\"] = 6;\n      this.textBox.style.visibility = \"visible\";\n    }\n  }\n}\n\nexport default Text;\n",{"ruleId":"133","severity":1,"message":"134","line":44,"column":10,"nodeType":"135","messageId":"136","endLine":44,"endColumn":18},{"ruleId":"133","severity":1,"message":"137","line":44,"column":20,"nodeType":"135","messageId":"136","endLine":44,"endColumn":27},{"ruleId":"133","severity":1,"message":"138","line":4,"column":8,"nodeType":"135","messageId":"136","endLine":4,"endColumn":27},{"ruleId":"133","severity":1,"message":"139","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"133","severity":1,"message":"140","line":9,"column":10,"nodeType":"135","messageId":"136","endLine":9,"endColumn":17},{"ruleId":"133","severity":1,"message":"141","line":10,"column":10,"nodeType":"135","messageId":"136","endLine":10,"endColumn":18},{"ruleId":"133","severity":1,"message":"142","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":18},{"ruleId":"133","severity":1,"message":"143","line":5,"column":20,"nodeType":"135","messageId":"136","endLine":5,"endColumn":31},{"ruleId":"133","severity":1,"message":"144","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":23},{"ruleId":"133","severity":1,"message":"145","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":17},{"ruleId":"133","severity":1,"message":"146","line":38,"column":9,"nodeType":"135","messageId":"136","endLine":38,"endColumn":24},{"ruleId":"133","severity":1,"message":"147","line":1,"column":10,"nodeType":"135","messageId":"136","endLine":1,"endColumn":23},{"ruleId":"133","severity":1,"message":"148","line":2,"column":16,"nodeType":"135","messageId":"136","endLine":2,"endColumn":21},{"ruleId":"133","severity":1,"message":"149","line":2,"column":23,"nodeType":"135","messageId":"136","endLine":2,"endColumn":34},{"ruleId":"133","severity":1,"message":"150","line":2,"column":36,"nodeType":"135","messageId":"136","endLine":2,"endColumn":47},{"ruleId":"133","severity":1,"message":"151","line":2,"column":49,"nodeType":"135","messageId":"136","endLine":2,"endColumn":57},{"ruleId":"133","severity":1,"message":"152","line":2,"column":59,"nodeType":"135","messageId":"136","endLine":2,"endColumn":74},{"ruleId":"133","severity":1,"message":"153","line":29,"column":19,"nodeType":"135","messageId":"136","endLine":29,"endColumn":28},{"ruleId":"133","severity":1,"message":"154","line":29,"column":30,"nodeType":"135","messageId":"136","endLine":29,"endColumn":39},"@typescript-eslint/no-unused-vars","'showArea' is assigned a value but never used.","Identifier","unusedVar","'setShow' is assigned a value but never used.","'ColorizeTwoToneIcon' is defined but never used.","'useEffect' is defined but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.","'ColorBox' is defined but never used.","'createColor' is defined but never used.","'LineWidthType' is defined but never used.","'TextField' is defined but never used.","'activeColorType' is assigned a value but never used.","'ShapeToolType' is defined but never used.","'Point' is defined but never used.","'getMousePos' is defined but never used.","'getTouchPos' is defined but never used.","'hexToRgb' is defined but never used.","'updateImageData' is defined but never used.","'x' is defined but never used.","'y' is defined but never used."]